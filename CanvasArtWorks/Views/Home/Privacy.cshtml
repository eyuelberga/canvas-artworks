<div class="row">
    <div class="col-sm-12 fs-container">
         <div class="one"></div>
    </div>
</div>
<script src="~/lib/jquery-1.8.2.js"></script>
    <script src="~/lib/fastclick.js"></script>
    <script src="~/lib/react-16.1.1.js"></script>
    <script src="~/lib/react-dom-16.1.1.js"></script>
    <script src="~/lib/react-dom-factories-1.0.2.js"></script>
    <script src="~/lib/create-react-class-15.6.2.js"></script>
    <script src="~/lib/react-15.1.0.js"></script>
    <!--<script src="react-0.14.7.js"></script>-->
    <!--<script src="react-0.13.3.js"></script>-->
    <!--<script src="react-0.10.0.js"></script>-->
    <script src="~/lib/js/literallycanvas.js"></script>
<script type="text/javascript">
  LC.setDefaultImageURLPrefix('https://localhost:5001/lib/img');


      var lc = null;
      
      var updateSVG = function() {
        if (!lc) return;
        // lc.getSVGString();
      }

      var backgroundImage = new Image();
      window.debugImage = backgroundImage;

      //LC.util.addImageOnload(backgroundImage, updateSVG);

      //backgroundImage.src = 'bear.png';

      //var watermarkImage = new Image();
      //watermarkImage.src = 'watermark.png';
      // for testing watermark loading bug:
      //watermarkImage.src = 'http://literallycanvas.com/_static/watermark.png'

      // the only LC-specific thing we have to do
      var containerOne = document.getElementsByClassName('one')[0];

      var MyTool = function() {
        var self = this;

        return {
          usesSimpleAPI: false,  // DO NOT FORGET THIS!!!
          name: 'ImageTool',
          iconName: 'line',
          optionsStyle: null,

          didBecomeActive: function(lc) {
            const onPointerDown = function(pt) {
              self.currentShape = LC.createShape('Image', {
                image: backgroundImage, x: pt.x, y: pt.y});
              lc.setShapesInProgress([self.currentShape]);
              lc.repaintLayer('main');
            };

            var onPointerDrag = function(pt) {
              self.currentShape.x = pt.x;
              self.currentShape.y = pt.y;
              lc.setShapesInProgress([self.currentShape]);
              lc.repaintLayer('main');
            };

            var onPointerUp = function(pt) {
              self.currentShape.x = pt.x;
              self.currentShape.y = pt.y;
              lc.setShapesInProgress([]);
              lc.saveShape(self.currentShape);
            };

            // lc.on() returns a function that unsubscribes us. capture it.
            self.unsubscribeFuncs = [
              lc.on('lc-pointerdown', onPointerDown),
              lc.on('lc-pointerdrag', onPointerDrag),
              lc.on('lc-pointerup', onPointerUp)
            ];
          },

          willBecomeInactive: function(lc) {
            // call all the unsubscribe functions
            self.unsubscribeFuncs.map(function(f) { f() });
          }
        }
      };

      // disable scrolling on touch devices so we can actually draw
      $(document).bind('touchmove', function(e) {
        if (e.target === document.documentElement) {
          return e.preventDefault();
        }
      });

      var showLC = function() {
        lc = LC.init(containerOne, {
          toolbarPosition: 'bottom',
          tools: LC.defaultTools.concat([MyTool]),
          snapshot: JSON.parse(localStorage.getItem('drawing')),
          defaultStrokeWidth: 2,
          strokeWidths: [1, 2, 3, 5, 30],
          backgroundShapes: [
          ],
          onInit: function(lc) {
            console.log('initialized with', lc)
          }
          // backgroundColor: '#f00',
          // watermarkImage: watermarkImage//,
          // imageSize: {width: 500, height: 300}
        });
        window.demoLC = lc;
       // lc.setWatermarkImage(watermarkImage);

        var save = function() {
          // localStorage.setItem('drawing', JSON.stringify(lc.getSnapshot()));
          updateSVG();
        }

        lc.on('drawingChange', save);
        lc.on('pan', save);
        lc.on('zoom', save);

        // lc.setPan(100, 100);

        updateSVG();

        /* demo of inserting a shape below another
        var newShape = LC.JSONToShape({"className":"Rectangle","data":{"x":238,"y":168,"width":122,"height":112,"strokeWidth":5,"strokeColor":"hsl(0, 100%, 42%)","fillColor":"#0f0"},"id":"4764db7c-9d6d-1e7f-f304-3904fa464e6b"})
        lc.saveShape(newShape, false, "e97d582e-6c88-f01e-6ba0-6a9344b5594c")
        */
      };

      $(document).ready(function() {
        // disable scrolling on touch devices so we can actually draw
        $(document).bind('touchmove', function(e) {
          if (e.target === document.documentElement) {
            return e.preventDefault();
          }
        });
        showLC();
      });

      $('#hide-lc').click(function() {
        if (lc) {
          lc.teardown();
          lc = null;
        }
      });

      $('#show-lc').click(function() {
        if (!lc) { showLC(); }
      });
    </script>

    <!--
    <script type="text/javascript">
      $(document).ready(function(){
        $('.literally.two').literallycanvas({
          imageURLPrefix: '/lib/img',
          onInit: function(lc) {
            console.log('initialized with', lc)
          }
        });
      });
    </script>
    -->
